{
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "$id": "https://raw.githubusercontent.com/Zaloni/arena-schemas/main/assets/asset_type_schema_v1.0.json",
  "$comment": "Note for Arena developers: Whenever the jsonschema is modified the updated version of the schema file has to be uploaded in github repo https://github.com/Zaloni/arena-schemas.git under arena-schemas/assets/ in main branch before release.",
  "title": "Schema for defining Asset Type",
  "version": "1.0",
  "description": "Asset types can be configured in Arena whose structure needs to be defined using an YAML file. This schema would be used by ARENA to validate the structure of any yaml file authored by any user. This schema file would also be very helpful for users as well. Users would be able to validate their yaml files before trying to register it in ARENA. This schema file also can be plugged into compatible JSON/YAML editors, IDEs and get validation, error highlighting, completion suggestions etc.",
  "examples": [
		{
		  "name": "Software",
		  "version": "1.0",
		  "typeOf": "Application",
		  "icon": "Software",
		  "associations": [
		    {
		      "relationship.kind": "ASSOCIATION",
		      "relationship.target": "Code",
		      "relationship.cardinality": "1.*",
		      "relationship.source": "code_libraries"
		    },
		    {
		      "relationship.kind": "COMPOSITION",
		      "relationship.target": "Modules",
		      "relationship.cardinality": "1.*",
		      "relationship.source": "code_modules"
		    }
		  ],
		  "attributes": [
		    {
		      "name": "software_name",
		      "displayName": "Software Name",
		      "description": "",
		      "attributeType": "READ-WRITE",
		      "attributeCategory": "",
		      "dataType": "text",
		      "defaultValue": "",
		      "storageType": "STRING",
		      "displayCondition": "",
		      "searchable": true,
		      "showInListing": true,
		      "required": true
		    },
		    {
		      "name": "software_description",
		      "displayName": "Software Description",
		      "dataType": "text",
		      "storageType": "STRING",
		      "required": false
		    },
		    {
		      "name": "code_libraries",
		      "displayName": "Code Libraries",
		      "description": "",
		      "attributeType": "READ-WRITE",
		      "attributeCategory": "",
		      "dataType": "select-object",
		      "defaultValue": "",
		      "storageType": "ARRAY(OBJECT)",
		      "displayCondition": "",
		      "searchable": true,
		      "showInListing": true,
		      "required": true
		    },
		    {
		      "name": "code_modules",
		      "displayName": "Code Modules",
		      "description": "",
		      "attributeType": "READ-WRITE",
		      "attributeCategory": "",
		      "dataType": "object",
		      "defaultValue": "",
		      "storageType": "ARRAY(OBJECT)",
		      "displayCondition": "",
		      "searchable": true,
		      "showInListing": true,
		      "required": true
		    },
		    {
		      "name": "contributors",
		      "displayName": "Contributors",
		      "description": "",
		      "attributeType": "READ-WRITE",
		      "attributeCategory": "",
		      "dataType": "multi-select-list",
		      "defaultValue": "",
		      "storageType": "ARRAY(STRING)",
		      "choices": {
		        "type": "managed_list",
		        "managedList": "contributors"
		      },
		      "displayCondition": "",
		      "searchable": true,
		      "showInListing": true,
		      "required": true
		    },
		    {
		      "name": "language",
		      "displayName": "Programming Language",
		      "description": "",
		      "attributeType": "READ-WRITE",
		      "attributeCategory": "",
		      "dataType": "single-select-list",
		      "defaultValue": "",
		      "storageType": "STRING",
		      "choices": {
		        "type": "values",
		        "options": [
		          "Java",
		          "Python",
		          "C++"
		        ]
		      },
		      "displayCondition": "",
		      "searchable": true,
		      "showInListing": true,
		      "required": true
		    },
		    {
		      "name": "domain",
		      "displayName": "Domain",
		      "description": "",
		      "attributeType": "READ-WRITE",
		      "attributeCategory": "",
		      "dataType": "pills",
		      "defaultValue": "",
		      "storageType": "STRING",
		      "choices": {
		        "type": "values",
		        "options": [
		          "Marketing",
		          "Sales"
		        ]
		      },
		      "displayCondition": "",
		      "searchable": true,
		      "showInListing": true,
		      "required": true
		    },
		    {
		      "name": "tags",
		      "displayName": "Tags",
		      "description": "",
		      "attributeType": "READ-WRITE",
		      "attributeCategory": "",
		      "dataType": "pills",
		      "defaultValue": "",
		      "storageType": "STRING",
		      "displayCondition": "",
		      "searchable": true,
		      "showInListing": true,
		      "required": true
		    }
		  ]
		}
  ],
  "type": "object",
  "properties": {
    "name": {
      "type": "string",
      "description": "Technical Name of the Asset Type. Asset Type technical name can be of maximum 247 characters.",
	  "maxLength": 247,
      "pattern": "^[A-Za-z0-9_]+$"
    },
    "displayName": {
      "type": "string",
      "description": "Display Name of the Asset Type. Asset Type display name can be of maximum 247 characters.",
      "maxLength": 247
    },
    "icon": {
      "type": "string",
      "description": "Icon name of the Asset Type"
    },
    "version": {
      "type": "string",
      "description": "Schema Version",
      "const": "1.0"
    },
    "uuid": {
      "type": "string",
      "description": "System generated UUID",
      "pattern": "^(?:[A-Za-z0-9][A-Za-z0-9-]*)?$"
    },
    "typeOf": {
      "type": "string",
      "description": "To indicate a IS-A relationship. An asset type can be a type of another defined asset type. Structurally the asset type would inherit the attributes of the related asset type of which it is a sub-type."
    },
    "associations": {
      "type": "array",
      "description": "Array of relationships which defines associations with other assets and objects.",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "relationship.kind": {
            "anyOf": [
              {
                "const": "ASSOCIATION",
                "description": "ASSOCIATION is the kind of relationship which is formed when and attribute refers to one or more instance(s) of another asset type or artifact type. The lifecycle of the asset type instance and the related instances should not interfere with each other and can exist independent of each other. "
              },
              {
                "const": "COMPOSITION",
                "description": "COMPOSITION is the kind of relationship which is formed when the asset type is composed of other child asset types. The asset  instance is the parent and all the related object instance(s) are children of the asset instance. The life cycle of the related instance(s) are tightly dependent on the instance of the asset. This kind of relationship should be presented with a create/manage of the related object instance(s) from the asset itself."
              }
            ]
          },
          "relationship.target": {
            "type": "string",
            "description": "Indicates the type of the related object instance. Value can be any Asset Type Name, Arena Artifact Type(Workflows, Rules, Connections etc.) or Object (referring to object instances exclusive to asset type representing a composition relationship)."
          },
          "relationship.cardinality": {
            "anyOf": [
              {
                "const": "1.1",
                "description": "One-to-One"
              },
              {
                "const": "1.*",
                "description": "One-to-Many"
              }
            ]
          },
          "relationship.source": {
            "type": "string",
            "description": "The attribute name that will hold the relationship"
          }
        },
        "required": [
          "relationship.kind",
          "relationship.target",
          "relationship.cardinality",
          "relationship.source"
        ],
        "additionalProperties": false
      }
    },
    "attributes": {
      "type": "array",
      "description": "Array of attributes which defines the fields of an Asset.",
      "minItems": 1,
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The technical key for the attribute. The value would be unique across all custom assets. Mandatory."
          },
          "displayName": {
            "type": "string",
            "description": "The label of the custom attribute that should appear in the UI. Mandatory."
          },
          "validation": {
            "type": "object",
            "description": "validation rules for the attribute",
            "additionalProperties" : {}
          },
          "description": {
            "type": "string",
            "description": "A brief description about the attribute. Optional."
          },
          "attributeType": {
            "anyOf": [
              {
                "const": "READ-ONLY",
                "description": "READ-ONLY attributeType is non-editable from Arena"
              },
              {
                "const": "READ-WRITE",
                "description": "READ-WRITE attributeType is editable from Arena"
              }
            ],
            "default": "READ-WRITE"
          },
          "attributeCategory": {
            "type": "string",
            "description": "To categorize the attributes in the UI. Optional."
          },
          "dataType": {
            "anyOf": [
              {
                "const": "text",
                "description": "To be used for rendering attributes with textual user input values."
              },
              {
                "const": "boolean",
                "description": "To be used for rendering attributes with boolean values."
              },
              {
                "const": "number",
                "description": "To be used for rendering attributes with numerical values."
              },
              {
                "const": "datetime",
                "description": "To be used for rendering attributes with date values."
              },
              {
                "const": "daterange",
                "description": "To be used for rendering attributes with date range values"
              },
              {
                "const": "single-select-list",
                "description": "To be used for rendering attributes with single selectable values."
              },
              {
                "const": "multi-select-list",
                "description": "To be used for rendering attributes with multi selectable values."
              },
              {
                "const": "select-object",
                "description": "To be used for adding a list of referenced objects with structural metadata defined in a separate YAML file"
              },
              {
                "const": "object",
                "description": "To be used for rendering selectable components to either create or link to other objects."
              },
              {
                "const": "pills",
                "description": "To be used for rendering attributes to accept multiple textual values as pills"
              },
              {
                "const": "markup",
                "description": "To be used for rendering attributes with descriptive values."
              },
              {
                "const": "web-url",
                "description": "To be used for rendering attributes with clickable links to open in new tab"
              },
              {
                "const": "rating",
                "description": "To be used for rendering attributes with rating values."
              }
            ],
            "description": "The input control type that must appear in the UI."
          },
          "defaultValue": {
            "type": "string",
            "description": "Any default value to be rendered for the attribute. Optional."
          },
          "storageType": {
            "enum": [
              "STRING",
              "ARRAY(STRING)",
              "DATE",
              "NUMBER",
              "OBJECT",
              "ARRAY(OBJECT)"
            ],
            "description": "The underlying storage class type for the attribute. Will be used for internal persisting the value of the attribute and validations."
          },
          "choices": {
            "type": "object",
            "description": "Configuration for choice attributes. Required if dataType is among single-select-list, multi-select-list or pills.",
            "properties": {
              "type": {
                "anyOf": [
                  {
                    "const": "values",
                    "description": "For static list of values that would appear for selection in the UI."
                  },
                  {
                    "const": "managed_list",
                    "description": "To fetch the values from an existing managed_list in Arena."
                  }
                ],
                "description": "The type of values that needs to be available as user choice. Can be either 'values' or 'managed_list'."
              },
              "options": {
                "type": "array",
                "description": "Applicable for choices.type=values. These would be the static list of values that must appear for selection in the UI.",
                "minItems": 1
              },
              "managedList": {
                "type": "string",
                "description": "Applicable for choices.type=managed_list. This is the name of an existing managed_list in Arena."
              }
            },
            "if": {
              "properties": {
                "type": {
                  "const": "values"
                }
              }
            },
            "then": {
              "required": [
                "options"
              ],
              "not": {
                "required": [
                  "managedList"
                ]
              },
              "$comment": "When value of 'choices.type' is 'values', then 'choices.options' is required and 'choices.managedList' is NOT required."
            },
            "else": {
              "required": [
                "managedList"
              ],
              "not": {
                "required": [
                  "options"
                ]
              },
              "$comment": "When value of 'choices.type' is 'managed_list' (i.e. NOT values), then 'choices.managedList' is required and 'choices.values' is NOT required."
            },
            "required": [
              "type"
            ],
            "additionalProperties": false
          },
          "displayCondition": {
            "type": "string",
            "description": "Boolean attribute display condition based on values of other attributes.Optional."
          },
          "searchable": {
            "type": "boolean",
            "description": "Indicates if the attribute value needs to be indexed to be searchable in Global Search.",
            "default": true
          },
          "showInListing": {
            "type": "boolean",
            "description": "Indicates if the attribute value needs to be rendered in the asset listing grid.",
            "default": false
          },
          "required": {
            "type": "boolean",
            "description": "Indicates if the attribute is a mandatory field."
          }
        },
        "if": {
          "properties": {
            "dataType": {
              "enum": [
                "single-select-list",
                "multi-select-list",
                "pills"
              ]
            }
          }
        },
        "then": {
        	"if": {
        		"properties": {
            		"dataType": {
              			"enum": [
                			"single-select-list",
                			"multi-select-list"
              			]
            		}
          		}
        	},
        	"then": {
        		"required": [
            		"choices"
          		],
          	"$comment": "If value of 'dataType' is 'single-select-list', 'multi-select-list' then 'choices' is required. 'choices' is optional for 'pills'"
        	}
        },
        "else": {
          "not": {
            "required": [
              "choices"
            ]
          },
          "$comment": "If value of 'dataType' is NOT 'single-select-list', 'multi-select-list' or 'pills' then 'choices' is NOT required."
        },
        "required": [
          "name",
          "displayName",
          "dataType",
          "storageType",
          "required"
        ],
        "additionalProperties": false
      }
    }
  },
  "required": [
    "name",
    "version",
    "attributes"
  ],
  "additionalProperties": false
}
